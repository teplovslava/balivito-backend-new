// üìÅ scripts/initSystemUser.js
import bcrypt from "bcrypt";
import User from "../models/User.js";

export async function ensureSystemUser() {
  const SYSTEM_EMAIL = "balivito@gmail.com";

  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ email
  const existing = await User.findOne({ email: SYSTEM_EMAIL });
  if (existing) {
    console.log("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–ø–æ email):", existing._id);

    // üíæ –ü—Ä—è–º–æ –≤ —Ä–∞–Ω—Ç–∞–π–º–µ –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ process.env (–≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞)
    process.env.SYSTEM_USER_ID = existing._id.toString();

    return;
  }

  // 2. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const rawPassword = "system_secret_" + Date.now();
  const hashedPassword = await bcrypt.hash(rawPassword, 10);

  const systemUser = await User.create({
    name: "Balivito",
    email: SYSTEM_EMAIL,
    password: hashedPassword,
    isVerified: true,
  });

  console.log("‚úÖ –°–æ–∑–¥–∞–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", systemUser._id);
  console.log("üîê –ü–∞—Ä–æ–ª—å (–æ—Ç–ª–∞–¥–∫–∞):", rawPassword);

  // üíæ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ —Ä–∞–Ω—Ç–∞–π–º–µ
  process.env.SYSTEM_USER_ID = systemUser._id.toString();
}
