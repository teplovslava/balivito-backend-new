import jwt from "jsonwebtoken";
import { v4 as uuidv4 } from "uuid";
import User from "../models/User.js";

const JWT_SECRET = process.env.JWT_SECRET;
const REFRESH_SECRET = process.env.JWT_REFRESH_SECRET;

export const userIdMiddleware = async (req, res, next) => {
  const token = req.cookies.token;
  const refreshToken = req.cookies.refreshToken;

  // üëâ 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ access-—Ç–æ–∫–µ–Ω–∞
  if (token) {
    try {
      const decoded = jwt.verify(token, JWT_SECRET);
      req.userId = decoded.id;
      return next();
    } catch (err) {
      // —Ç–æ–∫–µ–Ω –ø—Ä–æ—Ç—É—Ö ‚Äî –ø—Ä–æ–±—É–µ–º refresh
    }
  }

  // üëâ 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ refresh-—Ç–æ–∫–µ–Ω–∞
  if (refreshToken) {
    try {
      const decoded = jwt.verify(refreshToken, REFRESH_SECRET);

      // –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π access
      const newAccessToken = jwt.sign({ id: decoded.id }, JWT_SECRET, {
        expiresIn: "15m",
      });

      res.cookie("token", newAccessToken, {
        httpOnly: true,
        sameSite: "Lax",
        maxAge: 1000 * 60 * 15,
      });

      req.userId = decoded.id;
      return next();
    } catch (err) {
      // ‚ùå refresh –ø—Ä–æ—Ç—É—Ö ‚Äî –ù–ò–ö–ê–ö–û–ì–û —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ—Å—Ç—è
      return res
        .status(401)
        .json({ message: "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ª–æ–≥–∏–Ω—å—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ." });
    }
  }

  // üëâ 3. –ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –≤–æ–æ–±—â–µ ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –≥–æ—Å—Ç—è
  try {
    const newGuest = new User({
      isGuest: true,
      name: `Guest_${uuidv4().slice(0, 6)}`,
      email: `guest_${uuidv4()}@example.com`,
      password: uuidv4(),
    });

    await newGuest.save();

    const guestAccessToken = jwt.sign({ id: newGuest._id }, JWT_SECRET, {
      expiresIn: "15m",
    });
    const guestRefreshToken = jwt.sign({ id: newGuest._id }, REFRESH_SECRET, {
      expiresIn: "30d",
    });

    res.cookie("token", guestAccessToken, {
      httpOnly: true,
      sameSite: "Lax",
      maxAge: 1000 * 60 * 15,
    });

    res.cookie("refreshToken", guestRefreshToken, {
      httpOnly: true,
      sameSite: "Lax",
      maxAge: 1000 * 60 * 60 * 24 * 30,
    });

    req.userId = newGuest._id.toString();
    return next();
  } catch (guestErr) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ—Å—Ç—è:", guestErr);
    return res
      .status(500)
      .json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
  }
};
